name: Pre-commit Checks

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Setup Python for pre-commit
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: "3.13"

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.44.1

      - name: Install Go tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Cache pre-commit hooks
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Run pre-commit hooks
        id: pre-commit
        run: |
          # Run pre-commit and capture the exit code
          pre-commit run --all-files --show-diff-on-failure --color=always || echo "pre-commit-failed=true" >> $GITHUB_OUTPUT
        env:
          SKIP: task-lint

      - name: Check for changes and commit
        if: github.event_name == 'pull_request'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are any changes
          if ! git diff --quiet --exit-code; then
            echo "Changes detected after pre-commit hooks"
            git add .
            git commit -m "fix: auto-fix pre-commit issues" -m "Auto-fixes applied by pre-commit hooks in CI:" -m "- Code formatting (gofmt, goimports)" -m "- Trailing whitespace removal" -m "- End-of-file fixing" -m "- Go module tidying" -m "[skip ci]"

            # Push changes back to the PR branch
            git push origin HEAD:${{ github.head_ref }}

            echo "✅ Auto-fixes have been committed and pushed to the PR"
          else
            echo "✅ No changes needed after pre-commit hooks"
          fi

      - name: Fail if pre-commit had unfixable issues
        if: steps.pre-commit.outputs.pre-commit-failed == 'true'
        run: |
          echo "❌ Pre-commit hooks failed with unfixable issues"
          echo "Please review the logs above for details"
          exit 1

  format-check:
    name: Go Format Check
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.44.1

      - name: Run Go formatting
        run: |
          # Run task fmt to format code
          task fmt

      - name: Check for changes and commit
        if: github.event_name == 'pull_request'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are any changes
          if ! git diff --quiet --exit-code; then
            echo "Code formatting changes detected"
            echo "Files that were formatted:"
            git diff --name-only

            git add .
            git commit -m "fix: auto-format Go code" -m "Auto-formatting applied by task fmt in CI" -m "[skip ci]"

            # Push changes back to the PR branch
            git push origin HEAD:${{ github.head_ref }}

            echo "✅ Formatting fixes have been committed and pushed to the PR"
          else
            echo "✅ Code is already properly formatted"
          fi

  lint-check:
    name: Go Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Setup Task
        uses: arduino/setup-task@v2
        with:
          version: 3.44.1

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest
          args: --timeout=5m
