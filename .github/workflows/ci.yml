name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.21"

jobs:
  # Basic validation and linting
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go mod download
        run: go mod download

      - name: Go mod verify
        run: go mod verify

      - name: Go vet
        run: go vet ./...

      - name: Go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

  # Linting with golangci-lint
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest
          args: --timeout=5m

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go mod download
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # Integration tests with TestContainers
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind@sha256:7c3953162b1feca2aeb68a88ccb206485ff8c06177352ed9ffb3606354837869
        options: --privileged
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go mod download
        run: go mod download

      - name: Run integration tests
        run: |
          go test -v -timeout=10m ./internal/provider -run=Integration

  # Acceptance tests (using TestContainers)
  acceptance-test:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind@sha256:7c3953162b1feca2aeb68a88ccb206485ff8c06177352ed9ffb3606354837869
        options: --privileged
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go mod download
        run: go mod download

      - name: Run acceptance tests
        env:
          TF_ACC: "1"
        run: |
          go test -v -timeout=20m ./internal/provider -run=TestAcc

  # Build the provider binary
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [validate, lint, test]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go mod download
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -o terraform-provider-technitium-dns-server_${{ matrix.goos }}_${{ matrix.goarch }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: terraform-provider-technitium-dns-server_${{ matrix.goos }}_${{ matrix.goarch }}
          path: terraform-provider-technitium-dns-server_${{ matrix.goos }}_${{ matrix.goarch }}*

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Nancy vulnerability scanner
        run: |
          go install github.com/sonatype-nexus-community/nancy@v1.0.51
          go list -json -deps ./... | nancy sleuth
